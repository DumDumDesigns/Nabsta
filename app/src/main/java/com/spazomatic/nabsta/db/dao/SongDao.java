package com.spazomatic.nabsta.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.spazomatic.nabsta.db.Artist;
import com.spazomatic.nabsta.db.Image;
import com.spazomatic.nabsta.db.Track;

import com.spazomatic.nabsta.db.Song;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SONG.
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Dir_name = new Property(2, String.class, "dir_name", false, "DIR_NAME");
        public final static Property Length = new Property(3, Double.class, "length", false, "LENGTH");
        public final static Property Time_stamp = new Property(4, java.util.Date.class, "time_stamp", false, "TIME_STAMP");
        public final static Property Artist_id_fk = new Property(5, Long.class, "artist_id_fk", false, "ARTIST_ID_FK");
        public final static Property Master_track_id_fk = new Property(6, Long.class, "master_track_id_fk", false, "MASTER_TRACK_ID_FK");
        public final static Property Image_id_fk = new Property(7, Long.class, "image_id_fk", false, "IMAGE_ID_FK");
    };

    private DaoSession daoSession;

    private Query<Song> artist_SongsQuery;

    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SONG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'DIR_NAME' TEXT," + // 2: dir_name
                "'LENGTH' REAL," + // 3: length
                "'TIME_STAMP' INTEGER," + // 4: time_stamp
                "'ARTIST_ID_FK' INTEGER," + // 5: artist_id_fk
                "'MASTER_TRACK_ID_FK' INTEGER," + // 6: master_track_id_fk
                "'IMAGE_ID_FK' INTEGER);"); // 7: image_id_fk
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SONG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String dir_name = entity.getDir_name();
        if (dir_name != null) {
            stmt.bindString(3, dir_name);
        }
 
        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(4, length);
        }
 
        java.util.Date time_stamp = entity.getTime_stamp();
        if (time_stamp != null) {
            stmt.bindLong(5, time_stamp.getTime());
        }
 
        Long artist_id_fk = entity.getArtist_id_fk();
        if (artist_id_fk != null) {
            stmt.bindLong(6, artist_id_fk);
        }
 
        Long master_track_id_fk = entity.getMaster_track_id_fk();
        if (master_track_id_fk != null) {
            stmt.bindLong(7, master_track_id_fk);
        }
 
        Long image_id_fk = entity.getImage_id_fk();
        if (image_id_fk != null) {
            stmt.bindLong(8, image_id_fk);
        }
    }

    @Override
    protected void attachEntity(Song entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dir_name
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // length
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // time_stamp
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // artist_id_fk
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // master_track_id_fk
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // image_id_fk
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDir_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLength(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTime_stamp(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setArtist_id_fk(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMaster_track_id_fk(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setImage_id_fk(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "songs" to-many relationship of Artist. */
    public List<Song> _queryArtist_Songs(Long artist_id_fk) {
        synchronized (this) {
            if (artist_SongsQuery == null) {
                QueryBuilder<Song> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Artist_id_fk.eq(null));
                artist_SongsQuery = queryBuilder.build();
            }
        }
        Query<Song> query = artist_SongsQuery.forCurrentThread();
        query.setParameter(0, artist_id_fk);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getArtistDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTrackDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getImageDao().getAllColumns());
            builder.append(" FROM SONG T");
            builder.append(" LEFT JOIN ARTIST T0 ON T.'ARTIST_ID_FK'=T0.'_id'");
            builder.append(" LEFT JOIN TRACK T1 ON T.'MASTER_TRACK_ID_FK'=T1.'_id'");
            builder.append(" LEFT JOIN IMAGE T2 ON T.'IMAGE_ID_FK'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Song loadCurrentDeep(Cursor cursor, boolean lock) {
        Song entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Artist artist = loadCurrentOther(daoSession.getArtistDao(), cursor, offset);
        entity.setArtist(artist);
        offset += daoSession.getArtistDao().getAllColumns().length;

        Track track = loadCurrentOther(daoSession.getTrackDao(), cursor, offset);
        entity.setTrack(track);
        offset += daoSession.getTrackDao().getAllColumns().length;

        Image image = loadCurrentOther(daoSession.getImageDao(), cursor, offset);
        entity.setImage(image);

        return entity;    
    }

    public Song loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Song> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Song> list = new ArrayList<Song>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Song> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Song> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
