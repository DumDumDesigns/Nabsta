package com.spazomatic.nabsta.db;

import java.util.List;
import com.spazomatic.nabsta.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.spazomatic.nabsta.db.dao.ArtistDao;
import com.spazomatic.nabsta.db.dao.ImageDao;
import com.spazomatic.nabsta.db.dao.SongDao;
import com.spazomatic.nabsta.db.dao.TrackDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SONG.
 */
public class Song {

    private Long id;
    private String name;
    private String dir_name;
    private Double length;
    private java.util.Date time_stamp;
    private Long artist_id_fk;
    private Long master_track_id_fk;
    private Long image_id_fk;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SongDao myDao;

    private Artist artist;
    private Long artist__resolvedKey;

    private Track track;
    private Long track__resolvedKey;

    private Image image;
    private Long image__resolvedKey;

    private List<Track> tracks;

    public Song() {
    }

    public Song(Long id) {
        this.id = id;
    }

    public Song(Long id, String name, String dir_name, Double length, java.util.Date time_stamp, Long artist_id_fk, Long master_track_id_fk, Long image_id_fk) {
        this.id = id;
        this.name = name;
        this.dir_name = dir_name;
        this.length = length;
        this.time_stamp = time_stamp;
        this.artist_id_fk = artist_id_fk;
        this.master_track_id_fk = master_track_id_fk;
        this.image_id_fk = image_id_fk;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSongDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDir_name() {
        return dir_name;
    }

    public void setDir_name(String dir_name) {
        this.dir_name = dir_name;
    }

    public Double getLength() {
        return length;
    }

    public void setLength(Double length) {
        this.length = length;
    }

    public java.util.Date getTime_stamp() {
        return time_stamp;
    }

    public void setTime_stamp(java.util.Date time_stamp) {
        this.time_stamp = time_stamp;
    }

    public Long getArtist_id_fk() {
        return artist_id_fk;
    }

    public void setArtist_id_fk(Long artist_id_fk) {
        this.artist_id_fk = artist_id_fk;
    }

    public Long getMaster_track_id_fk() {
        return master_track_id_fk;
    }

    public void setMaster_track_id_fk(Long master_track_id_fk) {
        this.master_track_id_fk = master_track_id_fk;
    }

    public Long getImage_id_fk() {
        return image_id_fk;
    }

    public void setImage_id_fk(Long image_id_fk) {
        this.image_id_fk = image_id_fk;
    }

    /** To-one relationship, resolved on first access. */
    public Artist getArtist() {
        Long __key = this.artist_id_fk;
        if (artist__resolvedKey == null || !artist__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArtistDao targetDao = daoSession.getArtistDao();
            Artist artistNew = targetDao.load(__key);
            synchronized (this) {
                artist = artistNew;
            	artist__resolvedKey = __key;
            }
        }
        return artist;
    }

    public void setArtist(Artist artist) {
        synchronized (this) {
            this.artist = artist;
            artist_id_fk = artist == null ? null : artist.getId();
            artist__resolvedKey = artist_id_fk;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Track getTrack() {
        Long __key = this.master_track_id_fk;
        if (track__resolvedKey == null || !track__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrackDao targetDao = daoSession.getTrackDao();
            Track trackNew = targetDao.load(__key);
            synchronized (this) {
                track = trackNew;
            	track__resolvedKey = __key;
            }
        }
        return track;
    }

    public void setTrack(Track track) {
        synchronized (this) {
            this.track = track;
            master_track_id_fk = track == null ? null : track.getId();
            track__resolvedKey = master_track_id_fk;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Image getImage() {
        Long __key = this.image_id_fk;
        if (image__resolvedKey == null || !image__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImageDao targetDao = daoSession.getImageDao();
            Image imageNew = targetDao.load(__key);
            synchronized (this) {
                image = imageNew;
            	image__resolvedKey = __key;
            }
        }
        return image;
    }

    public void setImage(Image image) {
        synchronized (this) {
            this.image = image;
            image_id_fk = image == null ? null : image.getId();
            image__resolvedKey = image_id_fk;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Track> getTracks() {
        if (tracks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrackDao targetDao = daoSession.getTrackDao();
            List<Track> tracksNew = targetDao._querySong_Tracks(id);
            synchronized (this) {
                if(tracks == null) {
                    tracks = tracksNew;
                }
            }
        }
        return tracks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTracks() {
        tracks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
