package com.spazomatic.nabsta.db;

import com.spazomatic.nabsta.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.spazomatic.nabsta.db.dao.ArtistDao;
import com.spazomatic.nabsta.db.dao.ImageDao;
import com.spazomatic.nabsta.db.dao.TrackDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TRACK.
 */
public class Track {

    private Long id;
    private String name;
    private String file_name;
    private Long song_id_fk;
    private Long artist_id_fk;
    private Long image_id_fk;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TrackDao myDao;

    private Artist artist;
    private Long artist__resolvedKey;

    private Image image;
    private Long image__resolvedKey;


    public Track() {
    }

    public Track(Long id) {
        this.id = id;
    }

    public Track(Long id, String name, String file_name, Long song_id_fk, Long artist_id_fk, Long image_id_fk) {
        this.id = id;
        this.name = name;
        this.file_name = file_name;
        this.song_id_fk = song_id_fk;
        this.artist_id_fk = artist_id_fk;
        this.image_id_fk = image_id_fk;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTrackDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getFile_name() {
        return file_name;
    }

    public void setFile_name(String file_name) {
        this.file_name = file_name;
    }

    public Long getSong_id_fk() {
        return song_id_fk;
    }

    public void setSong_id_fk(Long song_id_fk) {
        this.song_id_fk = song_id_fk;
    }

    public Long getArtist_id_fk() {
        return artist_id_fk;
    }

    public void setArtist_id_fk(Long artist_id_fk) {
        this.artist_id_fk = artist_id_fk;
    }

    public Long getImage_id_fk() {
        return image_id_fk;
    }

    public void setImage_id_fk(Long image_id_fk) {
        this.image_id_fk = image_id_fk;
    }

    /** To-one relationship, resolved on first access. */
    public Artist getArtist() {
        Long __key = this.artist_id_fk;
        if (artist__resolvedKey == null || !artist__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArtistDao targetDao = daoSession.getArtistDao();
            Artist artistNew = targetDao.load(__key);
            synchronized (this) {
                artist = artistNew;
            	artist__resolvedKey = __key;
            }
        }
        return artist;
    }

    public void setArtist(Artist artist) {
        synchronized (this) {
            this.artist = artist;
            artist_id_fk = artist == null ? null : artist.getId();
            artist__resolvedKey = artist_id_fk;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Image getImage() {
        Long __key = this.image_id_fk;
        if (image__resolvedKey == null || !image__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImageDao targetDao = daoSession.getImageDao();
            Image imageNew = targetDao.load(__key);
            synchronized (this) {
                image = imageNew;
            	image__resolvedKey = __key;
            }
        }
        return image;
    }

    public void setImage(Image image) {
        synchronized (this) {
            this.image = image;
            image_id_fk = image == null ? null : image.getId();
            image__resolvedKey = image_id_fk;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
